openapi: 3.0.0
info:
  title: User Registration API
  version: 1.0.0
  description: >
    This API allows new users to register by providing personal and contact information.  
    **All fields marked with a red asterisk (*) are required.**  
    If any required field is missing or invalid, the server will respond with a `400 Bad Request` error.  
    If the email is already registered, a `409 Conflict` will be returned.

paths:
  /users/profile/{id}:
    put:
      summary: Update a user profile
      description: >
        Updates the personal and contact information of an existing user.  
        Only the fields provided in the request body will be updated.  
        Authentication via JWT token is required.
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user whose profile is being updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: Jane
                  description: The user's first name. Optional. If provided, cannot be empty.
                lastName:
                  type: string
                  example: Smith
                  description: The user's last name. Optional. If provided, cannot be empty.
                email:
                  type: string
                  example: jane.smith@example.com
                  format: email
                  description: >
                    The user's email address. Optional.  
                    Must be in valid format and unique in the system.
                phone:
                  type: string
                  example: "+0987654321"
                  description: >
                    The user's phone number. Optional.  
                    Should be in valid international format.
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User profile updated successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: XyZ123AbC789
                      firstName:
                        type: string
                        example: Jane
                      lastName:
                        type: string
                        example: Smith
                      email:
                        type: string
                        example: jane.smith@example.com
                      phone:
                        type: string
                        example: "+0987654321"
        '400':
          description: Bad Request – Invalid or missing data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data.
        '404':
          description: Not Found – User does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Server error.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
